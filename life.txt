                             Игра "Жизнь"
                             ~~~~~~~~~~~~

   Общее описание
   ~~~~~~~~~~~~~~

   Игра "Жизнь"  представляет собой клеточный автомат  с определенными
правилами  перехода.  Бесконечное  двумерное поле  состоит  из  ячеек,
которые могут находиться в одном из  двух состояний (состояние 0 и 1).
Каждая ячейка  имеет 8  соседних ячеек,  которые определяют  изменение
состояния этой ячейки по следующим правилам:

   1. если  ячейка имеет 3 соседей  (т.е. соседние ячейки  в состоянии
1), то на следующем ходу эта ячейка будет в состоянии 1
   2. если ячейка имеет 2 соседей то состояние ячейки не меняется
   3. в остальных случаях ячейка принимает состояние 0

   Все  ячейки  принимают  новое состоянии  одновременно,  т.е.  новое
состояние  ячейки зависит  только от  старого состояния  соседей и  от
старого состояния этой ячейки.

   Ячейку  в состоянии  1  будем называть  занятой;  в  состоянии 0  -
пустой.
   Множество занятых ячеек называется конфигурацией или позицией.

   Эти правила  были предложены  Дж. Х. Конуэем,  и были  выбраны так,
чтобы развитие происходило как можно более интересно и непредсказуемо.
Конуэй тщательно подбриал правила,  добиваясь, чтобы они удовлетворяли
следующим условиям:
   1.  Не должно  быть  ни одной  исходной  конфигурации, для  которой
существовало  бы  простое доказательство  возможности  неограниченного
роста популяции.
   2.  Должны  существовать  такие   начальные  конфигурации,  которые
_заведомо_ обладают способностью беспредельно развиваться.
   3. Должны  существовать простые  начальные конфигурации,  которые в
течение   значительного   промежутка  времени   растут,   претерпевают
разнообразные изменения и заканчивают свою эволюцию одним из следующих
трех способов: полностью исчезают; переходят в устойчивую конфигурацию
и перестают  изменяться; выходят  на колебательный  режим и  совершают
цикл превращений с определенным периодом.

   Примеры
   ~~~~~~~

   Примеры статичкских конфигураций:

   **       *       **          **
   **      * *     *  *        *  *
           * *      * *        *  *
   "Блок"   *        *          **

           "Улей"  "Каравай"  "Пруд"


   Примеры циклических (или пульсирующих) конфигураций:

     **         *        ***      ***            *    *
     **          **     ***                    ** **** **
   **          **                 "Мигалка-2"    *    *
   **            *      "Жаба-2"
                                               "Пентадекатлон-15"
   "Бакен-2"  "Часы-2"

   Одним  из  самых  замечательных  открытий  Конуэя  следует  считать
конфигурацию  из  пяти  занятых  ячеек  под  названием  "Глайдер"  (от
английского to glide - скользить). Эта конфигурация каждые четыре хода
смещается по диагонали на одну клетку:

    *
     *    * *      *     *       *
   ***     **    * *      **      *
           *      **     **     ***

   Были  найдены также  и  другие  движущиеся конфигурации,  названные
"Космическими кораблями":

      *          *           *
       *          *           *
   *   *     *    *     *     *
    ****      *****      ******

   "Космические  корабли" большей  длины могут  существовать только  в
окружении более мелких:

            *
             *
       *     *
        ******



    ************
   *           *
               *
              *

            *
             *
       *     *
        ******

   В  1970  году  Конуэю  пришлось   выдать  обещанную  премию  группе
математиков   из   Массачусетского   технологического   института   за
нахождение  бесконечно растущей  конфигурации.  Эта конфигурация  была
названа "Глайдерным  ружьем" так  как каждые 30  ходов из  нее вылетал
глайдер, а конфигурация возвращалась в исходное состояние.

               **
              *            *
    *        *            **
   **        *               **
              *              ***      *
               **            **      **
                          **
                           *

   Некоторые свойства
   ~~~~~~~~~~~~~~~~~~

   1.  Свойство сохранения  симметрии: если  конфигурация имеет  какую
либо симметрию (осевую, центральную и т.д.),  то на следующем шаге эта
симметрия сохранится.
   2. Ограничение скорости: воздействие занятых ячеек распространяется
со  скоростью  одна  клетка  за  шаг;  отсюда  вытекает,  что  никакая
конфигурация не может двигаться с большей скоростью.


   Реализация
   ~~~~~~~~~~

   Реализация  игры   на  бесконечном  поле  невозможна,   т.к.  любой
компьютер  конечен.  Но  можно реализовать  ее  на  некотором  большом
прямоугольнике, но при зтом могут происходить  искажения на  границах.
Если   начальная  конфигурация
значительно  меньше  размера  области и  не  предполагается  наблюдать
развитие длительное время, то этот вариант приемлем.

   Часто  этот вариант  реализуется  в  виде двумерного  массива.  Это
плохая реализация по количеству требуемой  памяти и по времени расчета
нового  состояния  поля.  Например,  поле  размера  10000x10000  будет
занимать не менее  12.5 мегабайт, а расчет  нового состояния потребует
сотни миллионов операций.

   Основная идея  предлагаемой реализации  состоит в  том, большинство
интересных конфигураций  содержат не очень большое  количество занятых
ячеек, а область из пустых ячеек статична, т.е. не меняется с течением
времени. Таким  образом можно не хранить  в памяти пустые  ячейки. При
такой  организации   уменьшается  количество  необходимой   памяти,  а
трудоемкость снижается  и становится порядка количества  занятых ячеек
(в  предположении,  что  динамическое   размещение  памяти  происходит
достаточно быстро).

   Для реализации  этой идеи  требуется использовать  линейные списки,
т.к. заранее нельзя определить  количество памяти, которое потребуется
для хранения  нового состояния поля. Первоначальный  вариант программы
использовал список  строк, в  котором каждая  строка представлялась  в
виде списка координат  ячеек в состоянии 1, во  втором варианте (более
позднем)  строка   представлялась  в   виде  массива   координат.  Это
позволило  избежать   некоторых  расходов   времени  на   динамическое
размещение памяти  н расходов памяти на  хранение ссылок, но  при зтом
пришлось делать два прохода по строке.

   Структуры данных и алгоритмы
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Следующая иллюстрация показывает структуру списка строк:

   ┌─────┐
   │Field│
   └──┬──┘
      │  ┌──────┐  ┌──────┬──────┬──────┐
      └──┤y_list├──┤x_list│x_list│x_list│
         └──┬───┘  └──────┴──────┴──────┘
            │
         ┌──┴───┐  ┌──────┬──────┐
         │y_list├──┤x_list│x_list│
         └──┬───┘  └──────┴──────┘
            │
         ┌──┴───┐  ┌──────┬──────┬──────┬──────┐
         │y_list├──┤x_list│x_list│x_list│x_list│
         └──┬───┘  └──────┴──────┴──────┴──────┘
           NULL


   Описание структур данных на языке Си:

      struct   x_list
      {
         long     x;             /* координата ячейки в состоянии 1  */
      };

      struct   y_list
      {
         long     y;             /* координата строки                */
         long     x_cnt;         /* количество ячеек в строке        */
         struct x_list  *line;   /* указатель на массив ячеек        */
         struct y_list  *next;   /* указатель на следующую непустую строку */
      };

      struct   y_list   *Field;


   Алгоритм получения нового состояния поля:

   Строки   обрабатываются   последовательно,   начиная   со   строки,
предшествующей  первой непустой.  Пустые строки,  у  которых сверху  и
снизу  находятся  пустые  строки,   пропускаются,  т.к.  они  остаются
пустыми.  Для  получения  нового  состояния  строки  создается  список
счетчиков  соседей, который  заполняется соответствующими  значениями.
Затем на основании счетчиков и старого состояния строки строится новое
состояние.  Новое состояние  строки заносится  в  список строк,  когда
алгоритм удаляется  на расстояние 2 от  этой строки. Это  делается для
предотвращения влияния  нового состояния  строки на  вычисление нового
состояния других строк.

   Структура списка счетчиков:

   ┌─────┐ ┌─────┐ ┌─────┐ ┌─────┐
   │count├─┤count├─┤count├─┤count├─NULL
   └─────┘ └─────┘ └─────┘ └─────┘

      struct   count
      {
         long     x;             /* координата ячейки, для которой   */
                                 /*    подсчитываются соседи         */
         char     cnt;           /* количество соседей               */
         struct count   *next;   /* указатель на следующий счетчик   */
      };

   Блок-схема:


   Интерфейс с пользователем
   ~~~~~~~~~~~~~~~~~~~~~~~~~

   В  качестве  библиотеки  использовалась  моя  библиотека  работы  с
экраном, мышью  и клавиатурой.  С помощью нее  был создан  интерфейс с
пользователем.
   Текущее состояние поля  отображается на всем экране  с возможностью
прокрутки мышью  и клавиатурой. Занятые ячейки  отображаются символами
'*', пустые -  пробелами. В левом нижнем углу  выводится статистика, в
которую входит номер шага (аналог времени), количество занятых ячеек и
координаты  курсора  относительно некоторого  "центра  поля".  Имеется
возможность редактирования поля мышью и клавиатурой.

   Примерный вид экрана:

   Назначение клавиш:

      Стрелки курсора    -  двигают курсор по полю
      7,8,9,4,6,1,2,3    -  сдвигают поле (это клавиши цифровой клавиатуры
                            при включеном NumLock)
      Пробел             -  получить следующее состояние поля
      Enter              -  запустить/остановить циклическое получение
                            нового состояния
      Tab                -  инвертировать состояние ячейки под курсором
      Правая кнопка мыши -  сдвинуть поле так, чтобы та ячейка, на которую
                            указывает курсор мыши, переместилась в центр
                            экрана
      Левая кнопка мыши  -  инвертировать состояние ячейки под курсором мыши
      F2                 -  сохранение текущего состояния в файл
      C                  -  очистка поля
      Q или Esc          -  выход


   Список литературы
   ~~~~~~~~~~~~~~~~~

   Мартин Гарднер "Крестики нолики"


